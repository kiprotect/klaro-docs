0236687bbffe9f35:
  de: '#### `watch(watcher)` <a id="ConsentManager.watch"></a>'
  en: >-
    <md-heading v="####"><md-code>watch(watcher)</md-code> <a
    id="ConsentManager.watch"></a></md-heading>
03a170a018dd43e9:
  de: >-
    Ändert **alle** Zustimmungen auf den angegebenen Wert (`true`
    oder `false`). Bitte beachten Sie, dass Anwendungen, die als
    erforderlich markiert sind, weiterhin aktiviert werden.
  en: >-
    Changes <md-strong>all</md-strong> consents to the given value
    (<md-code>true</md-code> or <md-code>false</md-code>). Please
    note that apps which are marked as required will still be
    enabled.
0910ce32ec3400f3:
  de: >-
    Aktualisieren Sie alle HTML-Elemente für das Gegebene, `app`
    um die `consent` Auswahl widerzuspiegeln. Dadurch werden entweder
    Elemente für Anwendungen, die aktiviert wurden, initialisiert
    oder aktive Elemente für Anwendungen, die deaktiviert wurden,
    entfernt.
  en: >-
    Update all HTML elements for the given <md-code>app</md-code>
    to reflect the <md-code>consent</md-code> choice. This will
    either initialize elements for apps that have been enabled
    and remove active elements for apps that have been disabled.
096b8bca7d570086:
  de: Löscht alle Zustimmungsbeauftragte.
  en: Deletes all consent managers.
09b35da4b1764e19:
  de: >-
    Gibt den Zustimmungsstatus für die Anwendung mit dem angegebenen
    `name`.
  en: >-
    Returns the consent state for the app with the specified <md-code>name</md-code>.
0d9d94a6131633b9:
  de: >-
    #### `updateAppCookies(app, consent)` <a id="ConsentManager.updateAppCookies"></a>
  en: >-
    <md-heading v="####"><md-code>updateAppCookies(app, consent)</md-code>
    <a id="ConsentManager.updateAppCookies"></a></md-heading>
0f7e45040f44be69:
  de: >-
    Gibt ein Javascript `Map` zurück, das die Übersetzungen für
    die angegebene `config` enthält.
  en: >-
    Returns a Javascript <md-code>Map</md-code> containing the
    translations for the given <md-code>config</md-code>.
11114838eeacb350:
  de: >-
    #### `klaro.getConfigTranslations(config)` <a id="getTranslations"></a>
  en: >-
    <md-heading v="####"><md-code>klaro.getConfigTranslations(config)</md-code>
    <a id="getTranslations"></a></md-heading>
12128d5a2982ae95:
  de: '#### `unwatch(watcher)` <a id="ConsentManager.unwatch"></a>'
  en: >-
    <md-heading v="####"><md-code>unwatch(watcher)</md-code> <a
    id="ConsentManager.unwatch"></a></md-heading>
1248147b19267482:
  de: >-
    Geben Sie die [`ConsentManager`](#ConsentManager) Instanz
    für die gegebene Konfiguration. Der `config` Parameter wird
    genauso behandelt wie bei der [`show`](#show) Funktion. Wenn
    für die gegebene Konfiguration kein Zustimmungsmanager existiert,
    wird dieser erstellt. Wenn einer existiert, gibt die Funktion
    immer dieselbe Instanz zurück, so dass es sicher ist, die
    Funktion mehrmals oder aus verschiedenen Kontexten aufzurufen.
  en: >-
    Return the <md-link href="I0NvbnNlbnRNYW5hZ2Vy"><md-code>ConsentManager</md-code></md-link>
    instance for the given configuration. The <md-code>config</md-code>
    parameter is handled exactly as for the <md-link href="I3Nob3c="><md-code>show</md-code></md-link>
    function. If no consent manager exists for the given config,
    it will be created. If one exists, the function will always
    return the same instance, so it is safe to call the function
    multiple times or from different contexts.
13a51263971c186d:
  de: '#### `klaro.language()` <a id="language"></a>'
  en: >-
    <md-heading v="####"><md-code>klaro.language()</md-code> <a
    id="language"></a></md-heading>
145404ba98a272fd:
  de: '## `ConsentManager` <a id="ConsentManager"></a>'
  en: >-
    <md-heading v="##"><md-code>ConsentManager</md-code> <a id="ConsentManager"></a></md-heading>
188513b731f5d279:
  de: '## `klaro`'
  en: <md-heading v="##"><md-code>klaro</md-code></md-heading>
1b9ec63ae73e56dd:
  de: >-
    Gibt die Anzahl der Tage zurück, nach denen das Zustimmungs-Cookie
    abläuft.
  en: >-
    Returns the number of days after which the consent cookie
    expires.
1e0df5fe95e06f24:
  de: Lädt die Zustimmungsoptionen aus dem Laden.
  en: Loads the consent choices from the store.
2292e542d428061b:
  de: >-
    #### `saveConsents()` <a id="ConsentManager.saveConsents"></a>
  en: >-
    <md-heading v="####"><md-code>saveConsents()</md-code> <a
    id="ConsentManager.saveConsents"></a></md-heading>
2679b3d58d18851b:
  de: '#### `klaro.resetManagers()` <a id="resetManagers"></a>'
  en: >-
    <md-heading v="####"><md-code>klaro.resetManagers()</md-code>
    <a id="resetManagers"></a></md-heading>
2e8864984799e9a6:
  de: >-
    Initialisiert Klaro: Wenn der Benutzer noch keine Einverständniserklärung
    eingereicht hat, wird die Einverständniserklärung (oder modal,
    je nach Ihrer Konfiguration) angezeigt. Die Funktion hat keine
    Auswirkung, wenn das `data-no-auto-load` Attribut auf dem
    Klaro-Skript-Tag auf `true`.
  en: >-
    Initializes Klaro: If the user has not yet submitted consent
    preferences, the consent notice (or modal, depending on your
    configuration) will be shown. The function has no effect if
    the <md-code>data-no-auto-load</md-code> attribute on the
    Klaro script tag is set to <md-code>true</md-code>.
30c2227313ab824a:
  de: >-
    Klaro bietet eine kleine, aber leistungsstarke Javascript-API,
    mit der Sie die Zustimmung Ihrer eigenen Anwendungen kontrollieren
    und überwachen können. Wenn sie als normales Skript geladen
    wird, kann auf die API über das globale `klaro` Projekt zugegriffen
    werden. Sie können Klaro auch als Modul importieren, um es
    innerhalb Ihres Node.js-Projekts zu verwenden. Um mehr darüber
    zu erfahren, sehen Sie sich unser [Beispiel auf Github](https://github.com/kiprotect/klaro/tree/master/examples/klaro-and-webpack)
    an.
  en: >-
    Klaro offers a small but powerful Javascript API that allows
    you to control and monitor consent from your own apps. When
    loaded as an ordinary script, the API can be accessed via
    the global <md-code>klaro</md-code> project. You can also
    import Klaro as a module to use it from within your Node.js
    project. To learn more about this, have a look at our <md-link
    href="aHR0cHM6Ly9naXRodWIuY29tL2tpcHJvdGVjdC9rbGFyby90cmVlL21hc3Rlci9leGFtcGxlcy9rbGFyby1hbmQtd2VicGFjaw==">example
    on Github</md-link>.
3572db9657dca6f6:
  de: >-
    #### `klaro.renderKlaro(config, show, modal)` <a id="renderKlaro"></a>
  en: >-
    <md-heading v="####"><md-code>klaro.renderKlaro(config, show,
    modal)</md-code> <a id="renderKlaro"></a></md-heading>
36887ee4a9628483:
  de: >-
    #### `getConsent(name)` <a id="ConsentManager.getConsent"></a>
  en: >-
    <md-heading v="####"><md-code>getConsent(name)</md-code> <a
    id="ConsentManager.getConsent"></a></md-heading>
37277e22cfc9770c:
  de: >-
    Informieren Sie alle Beobachter über ein Ereignis mit einer
    vorgegebenen `name` und zusätzlichen Information `data`.
  en: >-
    Notify all watchers about an event with a given <md-code>name</md-code>
    and additional information <md-code>data</md-code>.
379f7a39cbb7550d:
  de: '#### `klaro.show(config, modal)` <a id="show"></a>'
  en: >-
    <md-heading v="####"><md-code>klaro.show(config, modal)</md-code>
    <a id="show"></a></md-heading>
381123e3e2790ae8:
  de: Wenden Sie die aktuellen Zustimmungsentscheidungen an.
  en: Apply the current consent choices.
3dc0cfac22b813ab:
  de: '`saveConsents()` und `applyConsents()`.'
  en: >-
    <md-code>saveConsents()</md-code> and <md-code>applyConsents()</md-code>.
3e4cf8b87ceb5fa9:
  de: >-
    Registrieren Sie einen neuen Beobachter. Ein Wächter muss
    eine `update(obj, name, data)` Funktion implementieren, die
    Informationen über Zustandsaktualisierungen vom Zustimmungsverwalter
    erhält. Derzeit veröffentlicht der Zustimmungsvorsitzende
    nur Ereignisse mit einem Namen `consents`, der den aktuellen
    Zustimmungsstatus für alle Anwendungen enthält.
  en: >-
    Register a new watcher. A watcher must implement an <md-code>update(obj,
    name, data)</md-code> function, which will receive information
    about state updates from the consent manager. Currently, the
    consent manager only publishes events with name <md-code>consents</md-code>
    that contains the current consent state for all apps.
3edd396fc4d7cf5b:
  de: >-
    Gibt die Domäne des Zustimmungs-Cookies für die `cookie` Speicherung
    zurück.
  en: >-
    Returns the domain of the consent cookie for the <md-code>cookie</md-code>
    storage.
3ff1250a737f4fe4:
  de: >-
    Heben Sie die Registrierung eines Beobachters auf, der zuvor
    registriert war.
  en: Unregister a watcher that was previously registered.
50804850fda823bf:
  de: >-
    Gibt den Standardwert der Zustimmung für den angegebenen `app`,
    entweder `true` oder zurück `false`.
  en: >-
    Returns the default consent value for the given <md-code>app</md-code>,
    either <md-code>true</md-code> or <md-code>false</md-code>.
50b7ab4405284bef:
  de: >-
    Die `ConsentManager` Klasse verwaltet Einverständnisinformationen
    für Klaro. Sie können sie verwenden, um Einverständniserklärungen
    einzusehen oder zu aktualisieren. Sie speichert die aktuellen
    Zustimmungsentscheidungen, die ein Benutzer in der Benutzeroberfläche
    getroffen hat, synchronisiert sie mit dem Speicher und wendet
    sie durch Aktivieren oder Deaktivieren von HTML-Elementen
    und Löschen von Cookies an.
  en: >-
    The <md-code>ConsentManager</md-code> class manages consent
    information for Klaro. You can use it to view or update consent
    preferences. It stores the current consent choices that a
    user has made in the UI, synchronizes them to/from storage
    and applies them by enabling or disabling HTML elements and
    deleting cookies.
546d3af0fb002c26:
  de: >-
    #### `applyConsents()` <a id="ConsentManager.applyConsents"></a>
  en: >-
    <md-heading v="####"><md-code>applyConsents()</md-code> <a
    id="ConsentManager.applyConsents"></a></md-heading>
59bb15ad99c1d5a2:
  de: >-
    #### `changeAll(value)` <a id="ConsentManager.changeAll"></a>
  en: >-
    <md-heading v="####"><md-code>changeAll(value)</md-code> <a
    id="ConsentManager.changeAll"></a></md-heading>
5a23892cef77651d:
  de: Ändern Sie die Zustimmung von app `name` zu `value`.
  en: >-
    Change the consent of app <md-code>name</md-code> to <md-code>value</md-code>.
5f256d5778f98390:
  de: >-
    #### `get cookieExpiresAfterDays()` <a id="ConsentManager.cookieExpiresAfterDays"></a>
  en: >-
    <md-heading v="####"><md-code>get cookieExpiresAfterDays()</md-code>
    <a id="ConsentManager.cookieExpiresAfterDays"></a></md-heading>
5fda87098b4b3aea:
  de: '#### `klaro.initialize()` <a id="initialize"></a>'
  en: >-
    <md-heading v="####"><md-code>klaro.initialize()</md-code>
    <a id="initialize"></a></md-heading>
63d990edcaa58943:
  de: >-
    Zeigt die Einverständniserklärung für die gegebene Konfiguration
    an. Wenn dies der Fall `config` ist `undefined`, wird Klaro
    die durch das `data-config` Attribut des Klaro-Tags `script`
    definierte Konfigurationsvariable laden. Wenn auch diese nicht
    definiert ist, fällt sie auf `klaroConfig`.
  en: >-
    Shows the consent notice for the given config. If <md-code>config</md-code>
    is <md-code>undefined</md-code>, Klaro will load the config
    variable defined by the <md-code>data-config</md-code> attribute
    of the Klaro <md-code>script</md-code> tag. If that is undefined
    as well, it will fall back to <md-code>klaroConfig</md-code>.
6426670b4dad96df:
  de: >-
    #### `saveAndApplyConsents()` <a id="ConsentManager.saveAndApplyConsents"></a>
  en: >-
    <md-heading v="####"><md-code>saveAndApplyConsents()</md-code>
    <a id="ConsentManager.saveAndApplyConsents"></a></md-heading>
6896d16aa6cc936e:
  de: '#### `notify(name, data)` <a id="ConsentManager.notify"></a>'
  en: >-
    <md-heading v="####"><md-code>notify(name, data)</md-code>
    <a id="ConsentManager.notify"></a></md-heading>
69775ce1c88a40be:
  de: >-
    #### `resetConsents()` <a id="ConsentManager.resetConsents"></a>
  en: >-
    <md-heading v="####"><md-code>resetConsents()</md-code> <a
    id="ConsentManager.resetConsents"></a></md-heading>
6a8512a861c51f18:
  de: '#### `klaro.render(config, opts)` <a id="renderKlaro"></a>'
  en: >-
    <md-heading v="####"><md-code>klaro.render(config, opts)</md-code>
    <a id="renderKlaro"></a></md-heading>
6aad9c3a30a91578:
  de: >-
    Gibt ein Javascript `Map` zurück, das die Übersetzungen für
    die angegebene `config`. Der `config` Parameter wird genau
    wie bei der [`show`](#show) Funktion.
  en: >-
    Returns a Javascript <md-code>Map</md-code> containing the
    translations for the given <md-code>config</md-code>. The
    <md-code>config</md-code> parameter is handled exactly as
    for the <md-link href="I3Nob3c="><md-code>show</md-code></md-link>
    function.
6dad8523a3cd3431:
  de: >-
    #### `get cookieDomain()` <a id="ConsentManager.cookieDomain"></a>
  en: >-
    <md-heading v="####"><md-code>get cookieDomain()</md-code>
    <a id="ConsentManager.cookieDomain"></a></md-heading>
7164211ab2fec922:
  de: '#### `klaro.version()` <a id="version"></a>'
  en: >-
    <md-heading v="####"><md-code>klaro.version()</md-code> <a
    id="version"></a></md-heading>
71cfdb8a4f67396a:
  de: >-
    Gibt die Standardeinwilligungen für alle konfigurierten Anwendungen
    als Javascript-Objekt zurück.
  en: >-
    Returns the default consents for all configured apps as a
    Javascript object.
72476a73d2544950:
  de: >-
    Speichert die aktuellen Zustimmungsentscheidungen für den
    Laden und wendet sie an. Ruft  an.
  en: >-
    Saves the current consent choices to the store and applies
    them. Calls
742377b6aae4629d:
  de: >-
    #### `klaro.getTranslations(config)` <a id="getTranslations"></a>
  en: >-
    <md-heading v="####"><md-code>klaro.getTranslations(config)</md-code>
    <a id="getTranslations"></a></md-heading>
7eb0d15d04fbf033:
  de: >-
    Gibt die Konfiguration einer Anwendung nach ihrer `name`,
    oder `undefined` falls keine solche Anwendung existiert, zurück.
  en: >-
    Returns the configuration of an app by its <md-code>name</md-code>,
    or <md-code>undefined</md-code> if no such app exists.
84ddb783891bd8b4:
  de: '# Javascript-API'
  en: <md-heading v="#">Javascript API</md-heading>
8feb2523bc7eadb6:
  de: >-
    Setzt alle Zustimmungen auf ihre konfigurierten Standardwerte
    zurück, wendet die Zustimmungsoptionen an und löscht alle
    gespeicherten Zustimmungsinformationen.
  en: >-
    Resets all consents to their configured default values, applies
    the consent choices and deletes all stored consent information.
944737aeec6613ff:
  de: >-
    Gibt die Klaro-Version zurück. Meistens nützlich für Debugging-Zwecke.
  en: >-
    Returns the Klaro version. Mostly useful for debugging purposes.
9d461661520bb846:
  de: >-
    #### `updateConsent(name, value)` <a id="ConsentManager.updateConsent"></a>
  en: >-
    <md-heading v="####"><md-code>updateConsent(name, value)</md-code>
    <a id="ConsentManager.updateConsent"></a></md-heading>
a1b5f2509035993a:
  de: >-
    #### `updateAppElements(app, consent)` <a id="ConsentManager.updateAppElements"></a>
  en: >-
    <md-heading v="####"><md-code>updateAppElements(app, consent)</md-code>
    <a id="ConsentManager.updateAppElements"></a></md-heading>
a684f6d05d09623c:
  de: >-
    Gibt den Namen des Speichers zurück, der zur Speicherung der
    Zustimmungsinformationen verwendet wird. Für den `cookie`
    Speicher ist es der Name des Cookies. Für den `localStorage`
    Speicher ist es der Schlüssel des Speichers.
  en: >-
    Returns the name of the storage used for storing consent information.
    For the <md-code>cookie</md-code> store, it is the name of
    the cookie. For the <md-code>localStorage</md-code> store,
    it is the key of the storage.
ab36f6d2319a6da7:
  de: "Wiederherstellen von Zustimmungen, die gespeichert wurden,\
    \ als der Benutzer sie akzeptiert hat. Dadurch können Sie\
    \ den Zustand des Zustimmungs-Managers auf die letzte Zustimmungs-Wahl\
    \ des Benutzers zurücksetzen. "
  en: "Restore consents that were saved when the user accepted\
    \ them. This allows you to reset the state of the consent\
    \ manager to the last consent choice of the user. "
aba4a43110b17dd6:
  de: >-
    #### `getDefaultConsent(app)` <a id="ConsentManager.getDefaultConsent"></a>
  en: >-
    <md-heading v="####"><md-code>getDefaultConsent(app)</md-code>
    <a id="ConsentManager.getDefaultConsent"></a></md-heading>
ac86f036874be350:
  de: >-
    #### `get defaultConsents()` <a id="ConsentManager.defaultConsents"></a>
  en: >-
    <md-heading v="####"><md-code>get defaultConsents()</md-code>
    <a id="ConsentManager.defaultConsents"></a></md-heading>
b32b430ad528960c:
  de: '#### `getApp(name)` <a id="ConsentManager.getApp"></a>'
  en: >-
    <md-heading v="####"><md-code>getApp(name)</md-code> <a id="ConsentManager.getApp"></a></md-heading>
c37da1dbd6427f1d:
  de: >-
    #### `get storageName()` <a id="ConsentManager.storageName"></a>
  en: >-
    <md-heading v="####"><md-code>get storageName()</md-code>
    <a id="ConsentManager.storageName"></a></md-heading>
c47b7dc424dce70a:
  de: >-
    Speichern Sie die aktuellen Zustimmungsentscheidungen im Speicher
    (ohne sie anzuwenden).
  en: >-
    Save the current consent choices to the store (without applying
    them).
ce0800217d379309:
  de: >-
    Rendert die Klaro-Benutzeroberfläche. Wenn nein `config` angegeben
    wird, hat die Funktion keine Wirkung. Wenn `show` ja `true`,
    wird die Einverständniserklärung (wenn der Benutzer keine
    Einverständniserklärung abgegeben hat und wenn die Modalität
    nicht durch die Konfiguration erzwungen wird) oder die Einverständniserklärung
    (wenn der Benutzer bereits Einverständniserklärungen abgegeben
    hat) angezeigt. Wenn dies der Fall `modal` ist `true`, wird
    immer die Modalversion anstelle der Einverständniserklärung
    angezeigt, auch wenn der Benutzer keine Einverständniserklärung
    eingereicht hat.
  en: >-
    Renders the Klaro UI. If no <md-code>config</md-code> is given,
    the function has no effect. If <md-code>show</md-code> is
    <md-code>true</md-code>, the consent notice (if the user hasn't
    submitted consent preferences and if the modal isn't forced
    by the configuration) or the consent modal (if the user has
    already submitted consent preferences) will be shown. If <md-code>modal</md-code>
    is <md-code>true</md-code>, the modal will always be shown
    instead of the consent notice, even if the user hasn't submitted
    any consent preferences.
cfe46ed45ea7393a:
  de: >-
    #### `get storageMethod()` <a id="ConsentManager.storageMethod"></a>
  en: >-
    <md-heading v="####"><md-code>get storageMethod()</md-code>
    <a id="ConsentManager.storageMethod"></a></md-heading>
df5b5c776345b85a:
  de: >-
    #### `restoreSavedConsents()` <a id="ConsentManager.restoreSavedConsents"></a>
  en: >-
    <md-heading v="####"><md-code>restoreSavedConsents()</md-code>
    <a id="ConsentManager.restoreSavedConsents"></a></md-heading>
df7c8ef27e1841d1:
  de: >-
    Beeinflusst die UI-Sprache für Klaro. Verwendet entweder den
    durch die globale `lang` Variable angegebenen Wert oder die
    im Fenster oder HTML-Dokument definierte Sprache.
  en: >-
    Infers the UI language for Klaro. Either uses the value given
    by the global <md-code>lang</md-code> variable, or the language
    defined in the window or HTML document.
e3b0c44298fc1c14:
  de: ''
  en: ''
ebaa6366df8c7a84:
  de: >-
    #### `loadConsents()` <a id="ConsentManager.loadConsents"></a>
  en: >-
    <md-heading v="####"><md-code>loadConsents()</md-code> <a
    id="ConsentManager.loadConsents"></a></md-heading>
ecf6fd3ce5ec5e5e:
  de: '#### `klaro.getManager(config)` <a id="getManager"></a>'
  en: >-
    <md-heading v="####"><md-code>klaro.getManager(config)</md-code>
    <a id="getManager"></a></md-heading>
ef1b48357df00c8a:
  de: >-
    Rendert die Klaro-Benutzeroberfläche. Wenn keine `config`
    angegeben wird, hat die Funktion keine Wirkung. Optionen ist
    eine Karte mit Optionen: Wenn `opts.show` gleich `true` ist,
    wird die Einverständniserklärung (wenn der Benutzer keine
    Einverständniserklärung abgegeben hat und wenn die Modalität
    nicht durch die Konfiguration erzwungen wird) oder die Einverständniserklärung
    (wenn der Benutzer bereits Einverständniserklärungen abgegeben
    hat) angezeigt. Wenn `opts.modal` `true` ist, wird immer die
    Modalversion anstelle der Einverständniserklärung angezeigt,
    auch wenn der Benutzer keine Einverständniserklärung eingereicht
    hat.
  en: >-
    Renders the Klaro UI. If no <md-code>config</md-code> is given,
    the function has no effect. Options is a map containing options:
    If <md-code>opts.show</md-code> is <md-code>true</md-code>,
    the consent notice (if the user hasn't submitted consent preferences
    and if the modal isn't forced by the configuration) or the
    consent modal (if the user has already submitted consent preferences)
    will be shown. If <md-code>opts.modal</md-code> is <md-code>true</md-code>,
    the modal will always be shown instead of the consent notice,
    even if the user hasn't submitted any consent preferences.
f4465ba65bafb548:
  de: >-
    Gibt die für die Speicherung von Einwilligungsinformationen
    verwendete Speichermethode zurück. Derzeit ist dies entweder
    `cookie` oder `localStorage`.
  en: >-
    Returns the storage method used for storing consent information.
    Currently this is either <md-code>cookie</md-code> or <md-code>localStorage</md-code>.
fca0f7d4dda7acde:
  de: >-
    Wenn Klaro als reguläres Skript auf einer Website geladen
    wird, erstellt es eine globale `klaro` Variable, die die öffentliche
    Klaro-API offen legt. Die folgenden Abschnitte beschreiben
    jede Funktion dieser API.
  en: >-
    When loading Klaro as a regular script on a website, it will
    create a global <md-code>klaro</md-code> variable that exposes
    the public Klaro API. The following sections describe each
    function of this API.
ff4ca205099563b9:
  de: >-
    Aktualisieren Sie alle Cookies für die gegebenen `app`, um
    die Wahl der Zustimmung widerzuspiegeln. Dadurch wird versucht,
    Cookies für Anwendungen zu entfernen, die deaktiviert wurden.
  en: >-
    Update all cookies for the given <md-code>app</md-code> to
    reflect the consent choice. This will try to remove cookies
    for apps that have been disabled.
